TODO list overview:

Both
	-**theory:
		-unreliable = aesthetic
		-reliable calls = set and lock.
	-make health an int
	-misc debugging!
	-(done) change remove_obj to use callplayermethod
	-base class for shared funcs b/w phantom and chubbycharacter
	-(done) debug timedeffect to mk sure it lasts long enuff
	-(done) chubbyserver timedeffect update, no time param in init
	-fix add a player to use send server rpc
	-(done) camera
	-(done) rethink player method calling and cooldowns to sync, not client side
		-(done) client side, no cooldown thing. just call method with uuid and notify server
		-(done) stll need sepr8 function for external calling (to not double-notify server)
		-(done) serverside method replication exludes using for loop
	-(done) is client side use method adding new uuid?
	-layer and mask setting, support for up to 6 teams
	-death and respawn
		-use remove_child with state storage variable for respawning?
	-(done) ability syncing. client calls to server, server tells all other clients
	-(done) object removal. serverside objects call their parents to self-remove and notify clients, who also remove it, with check for node validity
	-(done) when syncing objects or anything really, need to check if that thing exists on the client first or else errors!


ChubbyCaterpillar0
	-ChubbyCharacter
		-(done) multiplayer interpolate velocity as well as position

	-(done) devise a reasonable system for updating player attributes/objects

ChubbyServer0
	-Misc
		-(done) move character files into gamecharacters folder
	-Chubbyserver
		-(done) when a player sends a command, all other players must be notified
	-ChubbyPhantom
		-(done) finish object syncing
		-(done) sync rot angle, gravity2, velocity


Misc (long term goals)
	-networking
		-(done) tweens for interpolation
		**impractical, probably allows hacks, solved by simpler algs-Lstm trained on client-server prediction to make game big smooth
			-preprocessing of how many "Game objects" the player currently sees (a number, X)
			-preprocessing of object attributes to small numbers between -1 and 1
			-profile of every single player 
			-l1: a recurrent neural network (RNN) runs X times, each takes inputs describing object type, position, health, shape bounds, shape type, current velocity, etc... might not even need current velocity
			-l2: an lstm which takes past object values to predict the server's next packet sent
			-Potentially even predicts gameplay moves, like when someone is likely to activate an ability
	-more stuff
		-threading for physics processing
		-polish sprites
		-animations
		-sounds